package com.thanics.andrew.halocontrol.Stereo3DFlightScene;

import android.app.ActivityManager;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.SurfaceTexture;
import android.support.annotation.AnyThread;
import android.support.annotation.MainThread;
import android.support.constraint.ConstraintLayout;
import android.util.AttributeSet;
import android.view.ContextThemeWrapper;
import android.view.InputDevice;
import android.view.MotionEvent;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;

import com.thanics.andrew.halocontrol.R;
import com.thanics.andrew.halocontrol.rendering.CanvasQuad;

public class GstVrSurfaceView extends ConstraintLayout {

    CanvasQuad canvasQuad;

    public SurfaceView surfaceView;

    private final UiUpdater uiUpdater = new UiUpdater();

    /** Creates this View using standard XML inflation. */
    public GstVrSurfaceView(Context context, AttributeSet attrs) {
        super(context, attrs);


    }

    /**
     * Creates this view for use in a VR scene.
     *
     * @param context the context used to set this View's theme
     * @param parent a parent view this view will be attached to such as the Activity's root View
     * @param quad the floating quad in the VR scene that will render this View
     */
    @MainThread
    public static GstVrSurfaceView createForOpenGl(Context context, ViewGroup parent, CanvasQuad quad) {
        // If a custom theme isn't specified, the Context's theme is used. For VR Activities, this is
        // the old Android default theme rather than a modern theme. Override this with a custom theme.
        Context theme = new ContextThemeWrapper(context, R.style.VrTheme);



        GstVrSurfaceView view = (GstVrSurfaceView) View.inflate(theme, R.layout.gst_vr_surface, null);
        view.surfaceView = view.findViewById(R.id.gst_vr_surface_view);
        view.canvasQuad = quad;
        view.setLayoutParams(CanvasQuad.getLayoutParams());
        view.setVisibility(View.VISIBLE);
        parent.addView(view, 0);

        return view;
    }

    /** Ignores 2D touch events when this View is used in a VR Activity. */
    @Override
    public boolean onInterceptTouchEvent(MotionEvent event) {
        if (canvasQuad == null) {
            // Not in VR mode so use standard behavior.
            return super.onInterceptTouchEvent(event);
        }

        if (ActivityManager.isRunningInTestHarness()) {
            // If your app uses UI Automator tests, it's useful to have this touch system handle touch
            // events created during tests. This allows you to create UI tests that work while the app
            // is in VR.
            return false;
        }

        // We are in VR mode. Synthetic events generated by MainSceneRenderer are marked as SOURCE_GAMEPAD
        // events. For this class of events, we will let the Android Touch system handle the event so we
        // return false. Other classes of events were generated by the user accidentally touching the
        // screen where this hidden view is attached.
        if (event.getSource() != InputDevice.SOURCE_GAMEPAD) {
            // Intercept and suppress touchscreen events so child buttons aren't clicked.
            return true;
        } else {
            // Don't intercept SOURCE_GAMEPAD events. onTouchEvent will handle these.
            return false;
        }
    }

    /** Handles standard Android touch events or synthetic VR events. */
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (canvasQuad != null) {
            // In VR mode so process controller events & ignore touchscreen events.
            if (event.getSource() != InputDevice.SOURCE_GAMEPAD) {
                // Tell the system that we handled the event. This prevents children from seeing the event.
                return true;
            } else {
                // Have the system send the event to child Views and they will handle clicks.
                return super.onTouchEvent(event);
            }
        } else {
            // Not in VR mode so use standard behavior.
            return super.onTouchEvent(event);
        }
    }

    /** Installs the View's event handlers. */
    @Override
    public void onFinishInflate() {
        super.onFinishInflate();

//    final ImageButton playPauseToggle = (ImageButton) findViewById(R.id.play_pause_toggle);
//    playPauseToggle.setOnClickListener(
//        new OnClickListener() {
//          @Override
//          public void onClick(View v) {
//            if (mediaPlayer == null) {
//              return;
//            }
//
//            if (mediaPlayer.isPlaying()) {
//              mediaPlayer.pause();
//              playPauseToggle.setBackgroundResource(R.drawable.play_button);
//              playPauseToggle.setContentDescription(getResources().getString(R.string.play_label));
//            } else {
//              mediaPlayer.start();
//              playPauseToggle.setBackgroundResource(R.drawable.pause_button);
//              playPauseToggle.setContentDescription(getResources().getString(R.string.pause_label));
//            }
//          }
//        });

//    statusText = findViewById(R.id.status_text);
    }

    /**
     * Renders this View and its children to either Android View hierarchy's Canvas or to the VR
     * scene's CanvasQuad.
     *
     * @param androidUiCanvas used in 2D mode to render children to the screen
     */
    @Override
    public void dispatchDraw(Canvas androidUiCanvas) {
        if (canvasQuad == null) {
            // Handle non-VR rendering.
            super.dispatchDraw(androidUiCanvas);
            return;
        }

        // Handle VR rendering.
        Canvas glCanvas = canvasQuad.lockCanvas();
        if (glCanvas == null) {
            // This happens if Android tries to draw this View before GL initialization completes. We need
            // to retry until the draw call happens after GL invalidation.
            postInvalidate();
            return;
        }

        // Clear the canvas first.
        glCanvas.drawColor(Color.BLACK);
        // Have Android render the child views.
        super.dispatchDraw(glCanvas);
        // Commit the changes.
        canvasQuad.unlockCanvasAndPost(glCanvas);
    }

    /**
     * Gets the listener used to update the seek bar's position on each new video frame.
     *
     * @return a listener that can be passed to
     *     {@link SurfaceTexture#setOnFrameAvailableListener(SurfaceTexture.OnFrameAvailableListener)}
     */
    public SurfaceTexture.OnFrameAvailableListener getFrameListener() {
        return uiUpdater;
    }

    /** Updates the seek bar and status text. */
    private final class UiUpdater implements SurfaceTexture.OnFrameAvailableListener {
        private int videoDurationMs = 0;

        // onFrameAvailable is called on an arbitrary thread, but we can only access mediaPlayer on the
        // main thread.
        private Runnable uiThreadUpdater = new Runnable() {
            @Override
            public void run() {

            }
        };

        @AnyThread
        @Override
        public void onFrameAvailable(SurfaceTexture surfaceTexture) {
            post(uiThreadUpdater);
        }
    }
}
